AWSTemplateFormatVersion: '2010-09-09'

Resources:
  CognitoResourceServerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: cognito-resource-server
      Runtime: python3.7
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          import boto3
          client = boto3.client('cognito-idp')
          def handler(event, context):
            response = {}
            try:
              logger.info(json.dumps(event))
              client = boto3.client('cognito-idp')
              resource_properties = event.get('ResourceProperties', {})
              old_resource_properties = event.get('OldResourceProperties', {})
              if event.get('RequestType', '') == 'Create':
                response = create(resource_properties)
              elif event.get('RequestType', '') == 'Update':
                if exists(resource_properties) is False:
                  delete(old_resource_properties)
                  response = create(resource_properties)
                else:
                  response = update(resource_properties)
              elif event.get('RequestType', '') == 'Delete':
                response = delete(resource_properties)
              else:
                response = {}

              logger.info(json.dumps(response))

              user_pool_id = response.get('ResourceServer', {}).get('UserPoolId', '')
              identifier = response.get('ResourceServer', {}).get('Identifier', '')
              physical_resource_id = '%s/%s' % (user_pool_id, identifier)

              cfnresponse.send(event, context, cfnresponse.SUCCESS, response, physical_resource_id)
            except Exception as e:
              logger.error(e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, '/')
          def create(properties):
            return client.create_resource_server(
              UserPoolId = properties.get('UserPoolId', ''),
              Identifier = properties.get('Identifier', ''),
              Name = properties.get('Name', ''),
              Scopes = properties.get('Scopes', [])
            )
          def exists(properties):
            try:
              res = client.describe_resource_server(
                UserPoolId = properties.get('UserPoolId', ''),
                Identifier = properties.get('Identifier', '')
              )
              return True
            except Exception as e:
              return False
          def update(properties):
            return client.update_resource_server(
              UserPoolId = properties.get('UserPoolId', ''),
              Identifier = properties.get('Identifier', ''),
              Name = properties.get('Name', ''),
              Scopes = properties.get('Scopes', [])
            )
          def delete(properties):
            return client.delete_resource_server(
              UserPoolId = properties.get('UserPoolId', ''),
              Identifier = properties.get('Identifier', '')
            )
      Handler: index.handler
      Role: !GetAtt CognitoResourceServerFunctionRole.Arn
  CognitoResourceServerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: 
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: CognitoResourceServerFunctionPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - cognito-idp:CreateResourceServer
            - cognito-idp:DescribeResourceServer
            - cognito-idp:UpdateResourceServer
            - cognito-idp:DeleteResourceServer
            Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*"

Outputs:
  FunctionArn:
    Value: !GetAtt CognitoResourceServerFunction.Arn
